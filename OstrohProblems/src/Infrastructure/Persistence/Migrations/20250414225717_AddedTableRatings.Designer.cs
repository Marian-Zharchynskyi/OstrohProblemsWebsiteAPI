// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250414225717_AddedTableRatings")]
    partial class AddedTableRatings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_comments_problem_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.ProblemCategories.ProblemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_problem_categories");

                    b.ToTable("problem_categories", (string)null);
                });

            modelBuilder.Entity("Domain.ProblemRatings.ProblemRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_problem_ratings");

                    b.HasIndex("ProblemId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_problem_ratings_problem_id_user_id");

                    b.ToTable("problem_ratings", (string)null);
                });

            modelBuilder.Entity("Domain.ProblemStatuses.ProblemStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_problem_statuses");

                    b.ToTable("problem_statuses", (string)null);
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("longitude");

                    b.Property<Guid>("ProblemStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("ProblemStatusId")
                        .HasDatabaseName("ix_problems_problem_status_id");

                    b.ToTable("problems", (string)null);
                });

            modelBuilder.Entity("ProblemProblemCategory", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ProblemsId")
                        .HasColumnType("uuid")
                        .HasColumnName("problems_id");

                    b.HasKey("CategoriesId", "ProblemsId")
                        .HasName("pk_fk_problem_categories");

                    b.HasIndex("ProblemsId")
                        .HasDatabaseName("ix_fk_problem_categories_problems_id");

                    b.ToTable("fk_problem_categories", (string)null);
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_problems_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.ProblemRatings.ProblemRating", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Ratings")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_ratings_problems_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.HasOne("Domain.ProblemStatuses.ProblemStatus", "ProblemStatus")
                        .WithMany("Problems")
                        .HasForeignKey("ProblemStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problems_problem_statuses_problem_status_id");

                    b.Navigation("ProblemStatus");
                });

            modelBuilder.Entity("ProblemProblemCategory", b =>
                {
                    b.HasOne("Domain.ProblemCategories.ProblemCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_problem_categories_categories_id");

                    b.HasOne("Domain.Problems.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_problems_problems_id");
                });

            modelBuilder.Entity("Domain.ProblemStatuses.ProblemStatus", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
