// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ProblemsId")
                        .HasColumnType("uuid")
                        .HasColumnName("problems_id");

                    b.HasKey("CategoriesId", "ProblemsId")
                        .HasName("pk_fk_problem_categories");

                    b.HasIndex("ProblemsId")
                        .HasDatabaseName("ix_fk_problem_categories_problems_id");

                    b.ToTable("fk_problem_categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = new Guid("e2e8a3bc-c44d-47ca-b088-35290b300760"),
                            ProblemsId = new Guid("504018b3-9628-4d74-a8ff-8bbac60553a7")
                        },
                        new
                        {
                            CategoriesId = new Guid("13240a79-cd16-4c5b-b974-9ee10084d17f"),
                            ProblemsId = new Guid("504018b3-9628-4d74-a8ff-8bbac60553a7")
                        },
                        new
                        {
                            CategoriesId = new Guid("13240a79-cd16-4c5b-b974-9ee10084d17f"),
                            ProblemsId = new Guid("2b6d15a1-5f21-4fd7-a9c7-883e2ab83f4f")
                        },
                        new
                        {
                            CategoriesId = new Guid("75d44fbc-d180-44f0-b07e-9226e6dceaf2"),
                            ProblemsId = new Guid("2b6d15a1-5f21-4fd7-a9c7-883e2ab83f4f")
                        },
                        new
                        {
                            CategoriesId = new Guid("75d44fbc-d180-44f0-b07e-9226e6dceaf2"),
                            ProblemsId = new Guid("86d3dede-fdb8-4c18-af89-5976b7408c4c")
                        },
                        new
                        {
                            CategoriesId = new Guid("0b9ba76d-de9c-4095-b055-e1e5c39f809f"),
                            ProblemsId = new Guid("86d3dede-fdb8-4c18-af89-5976b7408c4c")
                        },
                        new
                        {
                            CategoriesId = new Guid("0b9ba76d-de9c-4095-b055-e1e5c39f809f"),
                            ProblemsId = new Guid("bad37d13-3906-49c4-b776-1e7e4b780955")
                        },
                        new
                        {
                            CategoriesId = new Guid("fe096551-1df3-43aa-b091-e3928a586594"),
                            ProblemsId = new Guid("bad37d13-3906-49c4-b776-1e7e4b780955")
                        },
                        new
                        {
                            CategoriesId = new Guid("fe096551-1df3-43aa-b091-e3928a586594"),
                            ProblemsId = new Guid("07179785-65fd-4a8c-bc6d-81e0220518f9")
                        },
                        new
                        {
                            CategoriesId = new Guid("1c0dc3aa-f763-4c8b-83c0-32b5455655cb"),
                            ProblemsId = new Guid("07179785-65fd-4a8c-bc6d-81e0220518f9")
                        },
                        new
                        {
                            CategoriesId = new Guid("1c0dc3aa-f763-4c8b-83c0-32b5455655cb"),
                            ProblemsId = new Guid("10c50b37-6044-4dcc-992d-03ca646425db")
                        },
                        new
                        {
                            CategoriesId = new Guid("7b2f5794-a072-4a44-ab22-5728ea03e41a"),
                            ProblemsId = new Guid("10c50b37-6044-4dcc-992d-03ca646425db")
                        },
                        new
                        {
                            CategoriesId = new Guid("7b2f5794-a072-4a44-ab22-5728ea03e41a"),
                            ProblemsId = new Guid("2752d934-80d4-49a3-80af-58a5a05205ac")
                        },
                        new
                        {
                            CategoriesId = new Guid("002a5593-f9a5-4daf-92e8-1e6425306a06"),
                            ProblemsId = new Guid("2752d934-80d4-49a3-80af-58a5a05205ac")
                        },
                        new
                        {
                            CategoriesId = new Guid("002a5593-f9a5-4daf-92e8-1e6425306a06"),
                            ProblemsId = new Guid("f185924c-ce14-45ae-820a-efcbaba77149")
                        },
                        new
                        {
                            CategoriesId = new Guid("4f125acf-5f5f-4039-b515-cd35905a37de"),
                            ProblemsId = new Guid("f185924c-ce14-45ae-820a-efcbaba77149")
                        },
                        new
                        {
                            CategoriesId = new Guid("4f125acf-5f5f-4039-b515-cd35905a37de"),
                            ProblemsId = new Guid("90b029af-6d3d-47d6-9271-af0abb925d0e")
                        },
                        new
                        {
                            CategoriesId = new Guid("c8b2a272-30b4-4668-b75c-6da882be7323"),
                            ProblemsId = new Guid("90b029af-6d3d-47d6-9271-af0abb925d0e")
                        },
                        new
                        {
                            CategoriesId = new Guid("c8b2a272-30b4-4668-b75c-6da882be7323"),
                            ProblemsId = new Guid("08723ab2-f62a-4994-8c0d-9436c542dc0c")
                        },
                        new
                        {
                            CategoriesId = new Guid("e2e8a3bc-c44d-47ca-b088-35290b300760"),
                            ProblemsId = new Guid("08723ab2-f62a-4994-8c0d-9436c542dc0c")
                        });
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2e8a3bc-c44d-47ca-b088-35290b300760"),
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("13240a79-cd16-4c5b-b974-9ee10084d17f"),
                            Name = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("75d44fbc-d180-44f0-b07e-9226e6dceaf2"),
                            Name = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("0b9ba76d-de9c-4095-b055-e1e5c39f809f"),
                            Name = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("fe096551-1df3-43aa-b091-e3928a586594"),
                            Name = "Category 5"
                        },
                        new
                        {
                            Id = new Guid("1c0dc3aa-f763-4c8b-83c0-32b5455655cb"),
                            Name = "Category 6"
                        },
                        new
                        {
                            Id = new Guid("7b2f5794-a072-4a44-ab22-5728ea03e41a"),
                            Name = "Category 7"
                        },
                        new
                        {
                            Id = new Guid("002a5593-f9a5-4daf-92e8-1e6425306a06"),
                            Name = "Category 8"
                        },
                        new
                        {
                            Id = new Guid("4f125acf-5f5f-4039-b515-cd35905a37de"),
                            Name = "Category 9"
                        },
                        new
                        {
                            Id = new Guid("c8b2a272-30b4-4668-b75c-6da882be7323"),
                            Name = "Category 10"
                        });
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_comments_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Identity.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca597483-af5c-4a11-8a12-c7332898280e"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("79b9ff35-cce2-4eda-b076-bb91c4de2a7e"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9"),
                            Email = "admin@example.com",
                            FullName = "admin",
                            PasswordHash = "feU1/OuQgIi3heuhXbwSTA==:quuNvvRHJ69diK66GrEUVjczcOdvfJ26jry/Z2RV1Mw="
                        },
                        new
                        {
                            Id = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9"),
                            Email = "user@example.com",
                            FullName = "user",
                            PasswordHash = "NP9XGt/W1wSMA4F2Q+6haQ==:D9WqqyValg403ifZKx/Egg+eOPSPSu55uRlLsJnJ2nk="
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_image");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_image_user_id");

                    b.ToTable("user_image", (string)null);
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_problems_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_problems_user_id");

                    b.ToTable("problems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("504018b3-9628-4d74-a8ff-8bbac60553a7"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(300),
                            Description = "Description of problem 1",
                            Latitude = 50.100000000000001,
                            Longitude = 30.100000000000001,
                            StatusId = new Guid("13f24a9d-faae-4741-b2ab-feb26b7ea5b4"),
                            Title = "Problem 1",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(304),
                            UserId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        },
                        new
                        {
                            Id = new Guid("2b6d15a1-5f21-4fd7-a9c7-883e2ab83f4f"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(315),
                            Description = "Description of problem 2",
                            Latitude = 50.200000000000003,
                            Longitude = 30.199999999999999,
                            StatusId = new Guid("af12052c-8e8c-48fe-91ed-d38016d5ea79"),
                            Title = "Problem 2",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(315),
                            UserId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        },
                        new
                        {
                            Id = new Guid("86d3dede-fdb8-4c18-af89-5976b7408c4c"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(318),
                            Description = "Description of problem 3",
                            Latitude = 50.299999999999997,
                            Longitude = 30.300000000000001,
                            StatusId = new Guid("04629bec-7011-4f18-81b4-cd07b3717c06"),
                            Title = "Problem 3",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(319),
                            UserId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        },
                        new
                        {
                            Id = new Guid("bad37d13-3906-49c4-b776-1e7e4b780955"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(322),
                            Description = "Description of problem 4",
                            Latitude = 50.399999999999999,
                            Longitude = 30.399999999999999,
                            StatusId = new Guid("c126319e-7de1-4905-9b46-e811c86253d9"),
                            Title = "Problem 4",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(322),
                            UserId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        },
                        new
                        {
                            Id = new Guid("07179785-65fd-4a8c-bc6d-81e0220518f9"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(328),
                            Description = "Description of problem 5",
                            Latitude = 50.5,
                            Longitude = 30.5,
                            StatusId = new Guid("39718f61-7d56-42f3-ba22-7f9b0a1951d0"),
                            Title = "Problem 5",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(328),
                            UserId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        },
                        new
                        {
                            Id = new Guid("10c50b37-6044-4dcc-992d-03ca646425db"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(332),
                            Description = "Description of problem 6",
                            Latitude = 50.600000000000001,
                            Longitude = 30.600000000000001,
                            StatusId = new Guid("428b287b-6109-426b-a86e-0497077cf624"),
                            Title = "Problem 6",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(333),
                            UserId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        },
                        new
                        {
                            Id = new Guid("2752d934-80d4-49a3-80af-58a5a05205ac"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(336),
                            Description = "Description of problem 7",
                            Latitude = 50.700000000000003,
                            Longitude = 30.699999999999999,
                            StatusId = new Guid("9d11abda-838c-40ba-bff5-5f7545abf156"),
                            Title = "Problem 7",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(336),
                            UserId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        },
                        new
                        {
                            Id = new Guid("f185924c-ce14-45ae-820a-efcbaba77149"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(339),
                            Description = "Description of problem 8",
                            Latitude = 50.799999999999997,
                            Longitude = 30.800000000000001,
                            StatusId = new Guid("e0235e56-3308-42c9-98e9-ce5fb5c71d95"),
                            Title = "Problem 8",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(340),
                            UserId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        },
                        new
                        {
                            Id = new Guid("90b029af-6d3d-47d6-9271-af0abb925d0e"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(343),
                            Description = "Description of problem 9",
                            Latitude = 50.899999999999999,
                            Longitude = 30.899999999999999,
                            StatusId = new Guid("a8b3664e-7e96-4076-84ea-eb616d298729"),
                            Title = "Problem 9",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(343),
                            UserId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        },
                        new
                        {
                            Id = new Guid("08723ab2-f62a-4994-8c0d-9436c542dc0c"),
                            CreatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(348),
                            Description = "Description of problem 10",
                            Latitude = 51.0,
                            Longitude = 31.0,
                            StatusId = new Guid("e727cd2c-58a2-4837-b96b-e7f397af7811"),
                            Title = "Problem 10",
                            UpdatedAt = new DateTime(2025, 5, 16, 10, 47, 14, 544, DateTimeKind.Utc).AddTicks(348),
                            UserId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        });
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.HasKey("Id")
                        .HasName("pk_problem_image");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_problem_image_problem_id");

                    b.ToTable("problem_image", (string)null);
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<double>("Points")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("points");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_ratings_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ratings_user_id");

                    b.ToTable("ratings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rating_Points_Range", "points >= 1.00 AND points <= 5.00");
                        });
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e727cd2c-58a2-4837-b96b-e7f397af7811"),
                            Name = "Status 1"
                        },
                        new
                        {
                            Id = new Guid("13f24a9d-faae-4741-b2ab-feb26b7ea5b4"),
                            Name = "Status 2"
                        },
                        new
                        {
                            Id = new Guid("af12052c-8e8c-48fe-91ed-d38016d5ea79"),
                            Name = "Status 3"
                        },
                        new
                        {
                            Id = new Guid("04629bec-7011-4f18-81b4-cd07b3717c06"),
                            Name = "Status 4"
                        },
                        new
                        {
                            Id = new Guid("c126319e-7de1-4905-9b46-e811c86253d9"),
                            Name = "Status 5"
                        },
                        new
                        {
                            Id = new Guid("39718f61-7d56-42f3-ba22-7f9b0a1951d0"),
                            Name = "Status 6"
                        },
                        new
                        {
                            Id = new Guid("428b287b-6109-426b-a86e-0497077cf624"),
                            Name = "Status 7"
                        },
                        new
                        {
                            Id = new Guid("9d11abda-838c-40ba-bff5-5f7545abf156"),
                            Name = "Status 8"
                        },
                        new
                        {
                            Id = new Guid("e0235e56-3308-42c9-98e9-ce5fb5c71d95"),
                            Name = "Status 9"
                        },
                        new
                        {
                            Id = new Guid("a8b3664e-7e96-4076-84ea-eb616d298729"),
                            Name = "Status 10"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_fk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_fk_user_roles_users_id");

                    b.ToTable("fk_user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("ca597483-af5c-4a11-8a12-c7332898280e"),
                            UsersId = new Guid("4c69ccd8-d987-488a-8605-6aad3a2163e9")
                        },
                        new
                        {
                            RolesId = new Guid("79b9ff35-cce2-4eda-b076-bb91c4de2a7e"),
                            UsersId = new Guid("f66d83de-d0cd-4a42-9fa4-1bf581016fe9")
                        });
                });

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_categories_categories_id");

                    b.HasOne("Domain.Problems.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_problems_problems_id");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Identity.Users.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_images_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.HasOne("Domain.Statuses.Status", "ProblemStatus")
                        .WithMany("Problems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problems_statuses_status_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problems_users_user_id");

                    b.Navigation("ProblemStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Images")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_images_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Ratings")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Identity.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Identity.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_users_users_id");
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Problems");

                    b.Navigation("Ratings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
