// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327184737_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_comments_problem_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.ProblemCategories.ProblemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_problem_categories");

                    b.ToTable("problem_categories", (string)null);
                });

            modelBuilder.Entity("Domain.ProblemStatuses.ProblemStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_problem_statuses");

                    b.ToTable("problem_statuses", (string)null);
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid?>("ProblemCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("ProblemCategoryId")
                        .HasDatabaseName("ix_problems_problem_category_id");

                    b.ToTable("problems", (string)null);
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_problems_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.HasOne("Domain.ProblemCategories.ProblemCategory", null)
                        .WithMany("Problems")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("fk_problems_problem_categories_problem_category_id");
                });

            modelBuilder.Entity("Domain.ProblemCategories.ProblemCategory", b =>
                {
                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
