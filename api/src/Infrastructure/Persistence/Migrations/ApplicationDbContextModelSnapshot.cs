// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ProblemsId")
                        .HasColumnType("uuid")
                        .HasColumnName("problems_id");

                    b.HasKey("CategoriesId", "ProblemsId")
                        .HasName("pk_fk_problem_categories");

                    b.HasIndex("ProblemsId")
                        .HasDatabaseName("ix_fk_problem_categories_problems_id");

                    b.ToTable("fk_problem_categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = new Guid("1560a201-38d3-4581-892e-bcf57047d1b4"),
                            ProblemsId = new Guid("3b5dc36c-258c-446d-98db-d4a733ac637b")
                        },
                        new
                        {
                            CategoriesId = new Guid("0fb15901-2556-4ad8-896a-5a83b79c55f2"),
                            ProblemsId = new Guid("3b5dc36c-258c-446d-98db-d4a733ac637b")
                        },
                        new
                        {
                            CategoriesId = new Guid("0fb15901-2556-4ad8-896a-5a83b79c55f2"),
                            ProblemsId = new Guid("99b05525-4d4b-435e-85b2-b4a3ff8d46fb")
                        },
                        new
                        {
                            CategoriesId = new Guid("3d10b203-858e-4e73-9e8a-6917d38fe2d5"),
                            ProblemsId = new Guid("99b05525-4d4b-435e-85b2-b4a3ff8d46fb")
                        },
                        new
                        {
                            CategoriesId = new Guid("3d10b203-858e-4e73-9e8a-6917d38fe2d5"),
                            ProblemsId = new Guid("adc23850-b45e-413f-b2d1-a7aabca606cb")
                        },
                        new
                        {
                            CategoriesId = new Guid("746a0772-91b6-4283-90ec-bc6a8279b84f"),
                            ProblemsId = new Guid("adc23850-b45e-413f-b2d1-a7aabca606cb")
                        },
                        new
                        {
                            CategoriesId = new Guid("746a0772-91b6-4283-90ec-bc6a8279b84f"),
                            ProblemsId = new Guid("ec4e2fac-0ffa-4713-afcd-53af5b441138")
                        },
                        new
                        {
                            CategoriesId = new Guid("6da88131-a6ca-4ad0-be9a-95a6e2d137f4"),
                            ProblemsId = new Guid("ec4e2fac-0ffa-4713-afcd-53af5b441138")
                        },
                        new
                        {
                            CategoriesId = new Guid("6da88131-a6ca-4ad0-be9a-95a6e2d137f4"),
                            ProblemsId = new Guid("241ccdad-4fdf-499b-b834-5057b2174599")
                        },
                        new
                        {
                            CategoriesId = new Guid("7d1bff9a-d86f-4656-a5b6-a19141b97554"),
                            ProblemsId = new Guid("241ccdad-4fdf-499b-b834-5057b2174599")
                        },
                        new
                        {
                            CategoriesId = new Guid("7d1bff9a-d86f-4656-a5b6-a19141b97554"),
                            ProblemsId = new Guid("6cff4377-a1f8-4bf8-86df-83cfaf233410")
                        },
                        new
                        {
                            CategoriesId = new Guid("69046331-69d0-4836-9a1d-b01eee942ecb"),
                            ProblemsId = new Guid("6cff4377-a1f8-4bf8-86df-83cfaf233410")
                        },
                        new
                        {
                            CategoriesId = new Guid("69046331-69d0-4836-9a1d-b01eee942ecb"),
                            ProblemsId = new Guid("f92a1ffd-6630-437a-9d41-3763fcb80fdd")
                        },
                        new
                        {
                            CategoriesId = new Guid("3862dd30-1b4f-41f8-93e5-a33298e64ba4"),
                            ProblemsId = new Guid("f92a1ffd-6630-437a-9d41-3763fcb80fdd")
                        },
                        new
                        {
                            CategoriesId = new Guid("3862dd30-1b4f-41f8-93e5-a33298e64ba4"),
                            ProblemsId = new Guid("45073a7c-2949-456e-97df-85f6109d7c88")
                        },
                        new
                        {
                            CategoriesId = new Guid("67ecbac2-70c1-4fef-8b61-10232266d9a3"),
                            ProblemsId = new Guid("45073a7c-2949-456e-97df-85f6109d7c88")
                        },
                        new
                        {
                            CategoriesId = new Guid("67ecbac2-70c1-4fef-8b61-10232266d9a3"),
                            ProblemsId = new Guid("94ca64b7-b8f5-474f-92b1-eede5e5d30d4")
                        },
                        new
                        {
                            CategoriesId = new Guid("80f9e2ef-8259-4515-98f7-51e852d4eece"),
                            ProblemsId = new Guid("94ca64b7-b8f5-474f-92b1-eede5e5d30d4")
                        },
                        new
                        {
                            CategoriesId = new Guid("80f9e2ef-8259-4515-98f7-51e852d4eece"),
                            ProblemsId = new Guid("7c717a3e-ccca-4e56-b4a5-36c83331deb4")
                        },
                        new
                        {
                            CategoriesId = new Guid("1560a201-38d3-4581-892e-bcf57047d1b4"),
                            ProblemsId = new Guid("7c717a3e-ccca-4e56-b4a5-36c83331deb4")
                        });
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1560a201-38d3-4581-892e-bcf57047d1b4"),
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("0fb15901-2556-4ad8-896a-5a83b79c55f2"),
                            Name = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("3d10b203-858e-4e73-9e8a-6917d38fe2d5"),
                            Name = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("746a0772-91b6-4283-90ec-bc6a8279b84f"),
                            Name = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("6da88131-a6ca-4ad0-be9a-95a6e2d137f4"),
                            Name = "Category 5"
                        },
                        new
                        {
                            Id = new Guid("7d1bff9a-d86f-4656-a5b6-a19141b97554"),
                            Name = "Category 6"
                        },
                        new
                        {
                            Id = new Guid("69046331-69d0-4836-9a1d-b01eee942ecb"),
                            Name = "Category 7"
                        },
                        new
                        {
                            Id = new Guid("3862dd30-1b4f-41f8-93e5-a33298e64ba4"),
                            Name = "Category 8"
                        },
                        new
                        {
                            Id = new Guid("67ecbac2-70c1-4fef-8b61-10232266d9a3"),
                            Name = "Category 9"
                        },
                        new
                        {
                            Id = new Guid("80f9e2ef-8259-4515-98f7-51e852d4eece"),
                            Name = "Category 10"
                        });
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_comments_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Identity.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4038e59b-f787-45d6-9cdb-93ccf559e962"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("2b9d3d39-9e2b-4103-9ec5-8dc258700ef3"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d"),
                            Email = "admin@example.com",
                            FullName = "admin",
                            PasswordHash = "O1+fYlA6odci1pAjpTeH/g==:TJ1zQ1M//MBLEi2yGWSLkUkL/VP9UgnYLec6ggfK23o="
                        },
                        new
                        {
                            Id = new Guid("a29750c7-a779-4b14-b693-24584cffb85a"),
                            Email = "user@example.com",
                            FullName = "user",
                            PasswordHash = "7JUnoEIB4OCIg9sw6YIVhA==:FiwL3Qqt5RyBHEoUONt58fqhINuhHCQEwUKYpuaQoFQ="
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_image");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_image_user_id");

                    b.ToTable("user_image", (string)null);
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_problems_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_problems_user_id");

                    b.ToTable("problems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b5dc36c-258c-446d-98db-d4a733ac637b"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5511),
                            Description = "Description of problem 1",
                            Latitude = 50.100000000000001,
                            Longitude = 30.100000000000001,
                            StatusId = new Guid("0abbcbac-abd5-4ee0-9724-d6ab636c7afe"),
                            Title = "Problem 1",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5512),
                            UserId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        },
                        new
                        {
                            Id = new Guid("99b05525-4d4b-435e-85b2-b4a3ff8d46fb"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5565),
                            Description = "Description of problem 2",
                            Latitude = 50.200000000000003,
                            Longitude = 30.199999999999999,
                            StatusId = new Guid("cfe2e4f7-b974-4ef8-af3d-2bf3b0e86169"),
                            Title = "Problem 2",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5565),
                            UserId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        },
                        new
                        {
                            Id = new Guid("adc23850-b45e-413f-b2d1-a7aabca606cb"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5568),
                            Description = "Description of problem 3",
                            Latitude = 50.299999999999997,
                            Longitude = 30.300000000000001,
                            StatusId = new Guid("8698a42e-f4b6-40e0-8482-7a5ffd70b72c"),
                            Title = "Problem 3",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5568),
                            UserId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        },
                        new
                        {
                            Id = new Guid("ec4e2fac-0ffa-4713-afcd-53af5b441138"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5571),
                            Description = "Description of problem 4",
                            Latitude = 50.399999999999999,
                            Longitude = 30.399999999999999,
                            StatusId = new Guid("e91f2955-8418-416a-a467-ec9f0e3e36ac"),
                            Title = "Problem 4",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5572),
                            UserId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        },
                        new
                        {
                            Id = new Guid("241ccdad-4fdf-499b-b834-5057b2174599"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5576),
                            Description = "Description of problem 5",
                            Latitude = 50.5,
                            Longitude = 30.5,
                            StatusId = new Guid("1322f4b2-8ad7-4714-9b83-262d26c1aba7"),
                            Title = "Problem 5",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5576),
                            UserId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        },
                        new
                        {
                            Id = new Guid("6cff4377-a1f8-4bf8-86df-83cfaf233410"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5579),
                            Description = "Description of problem 6",
                            Latitude = 50.600000000000001,
                            Longitude = 30.600000000000001,
                            StatusId = new Guid("89e5e30b-eea0-4f12-8bd7-14ab16be4a73"),
                            Title = "Problem 6",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5580),
                            UserId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        },
                        new
                        {
                            Id = new Guid("f92a1ffd-6630-437a-9d41-3763fcb80fdd"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5582),
                            Description = "Description of problem 7",
                            Latitude = 50.700000000000003,
                            Longitude = 30.699999999999999,
                            StatusId = new Guid("84e5dcf5-acdf-4118-b2d6-c35a61fc5818"),
                            Title = "Problem 7",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5583),
                            UserId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        },
                        new
                        {
                            Id = new Guid("45073a7c-2949-456e-97df-85f6109d7c88"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5586),
                            Description = "Description of problem 8",
                            Latitude = 50.799999999999997,
                            Longitude = 30.800000000000001,
                            StatusId = new Guid("91102731-4c95-4d7a-8a59-c0c815fc6a3e"),
                            Title = "Problem 8",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5586),
                            UserId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        },
                        new
                        {
                            Id = new Guid("94ca64b7-b8f5-474f-92b1-eede5e5d30d4"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5588),
                            Description = "Description of problem 9",
                            Latitude = 50.899999999999999,
                            Longitude = 30.899999999999999,
                            StatusId = new Guid("2e17a0c6-4cf8-4365-81d4-545f0e498e2d"),
                            Title = "Problem 9",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5589),
                            UserId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        },
                        new
                        {
                            Id = new Guid("7c717a3e-ccca-4e56-b4a5-36c83331deb4"),
                            CreatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5592),
                            Description = "Description of problem 10",
                            Latitude = 51.0,
                            Longitude = 31.0,
                            StatusId = new Guid("814a5e44-95d3-46af-ad95-151d4011b8f9"),
                            Title = "Problem 10",
                            UpdatedAt = new DateTime(2025, 10, 18, 19, 25, 58, 571, DateTimeKind.Utc).AddTicks(5592),
                            UserId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        });
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.HasKey("Id")
                        .HasName("pk_problem_image");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_problem_image_problem_id");

                    b.ToTable("problem_image", (string)null);
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<double>("Points")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("points");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_ratings_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ratings_user_id");

                    b.ToTable("ratings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rating_Points_Range", "points >= 1.00 AND points <= 5.00");
                        });
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("814a5e44-95d3-46af-ad95-151d4011b8f9"),
                            Name = "Status 1"
                        },
                        new
                        {
                            Id = new Guid("0abbcbac-abd5-4ee0-9724-d6ab636c7afe"),
                            Name = "Status 2"
                        },
                        new
                        {
                            Id = new Guid("cfe2e4f7-b974-4ef8-af3d-2bf3b0e86169"),
                            Name = "Status 3"
                        },
                        new
                        {
                            Id = new Guid("8698a42e-f4b6-40e0-8482-7a5ffd70b72c"),
                            Name = "Status 4"
                        },
                        new
                        {
                            Id = new Guid("e91f2955-8418-416a-a467-ec9f0e3e36ac"),
                            Name = "Status 5"
                        },
                        new
                        {
                            Id = new Guid("1322f4b2-8ad7-4714-9b83-262d26c1aba7"),
                            Name = "Status 6"
                        },
                        new
                        {
                            Id = new Guid("89e5e30b-eea0-4f12-8bd7-14ab16be4a73"),
                            Name = "Status 7"
                        },
                        new
                        {
                            Id = new Guid("84e5dcf5-acdf-4118-b2d6-c35a61fc5818"),
                            Name = "Status 8"
                        },
                        new
                        {
                            Id = new Guid("91102731-4c95-4d7a-8a59-c0c815fc6a3e"),
                            Name = "Status 9"
                        },
                        new
                        {
                            Id = new Guid("2e17a0c6-4cf8-4365-81d4-545f0e498e2d"),
                            Name = "Status 10"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_fk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_fk_user_roles_users_id");

                    b.ToTable("fk_user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("4038e59b-f787-45d6-9cdb-93ccf559e962"),
                            UsersId = new Guid("c39f2238-1b72-433f-8d33-f064fee7746d")
                        },
                        new
                        {
                            RolesId = new Guid("2b9d3d39-9e2b-4103-9ec5-8dc258700ef3"),
                            UsersId = new Guid("a29750c7-a779-4b14-b693-24584cffb85a")
                        });
                });

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_categories_categories_id");

                    b.HasOne("Domain.Problems.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_problems_problems_id");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Identity.Users.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_images_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.HasOne("Domain.Statuses.Status", "ProblemStatus")
                        .WithMany("Problems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problems_statuses_status_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problems_users_user_id");

                    b.Navigation("ProblemStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Images")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_images_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Ratings")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Identity.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Identity.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_users_users_id");
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Problems");

                    b.Navigation("Ratings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
