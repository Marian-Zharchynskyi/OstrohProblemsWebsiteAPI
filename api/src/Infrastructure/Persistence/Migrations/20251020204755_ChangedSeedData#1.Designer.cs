// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020204755_ChangedSeedData#1")]
    partial class ChangedSeedData1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<Guid>("ProblemsId")
                        .HasColumnType("uuid")
                        .HasColumnName("problems_id");

                    b.HasKey("CategoriesId", "ProblemsId")
                        .HasName("pk_fk_problem_categories");

                    b.HasIndex("ProblemsId")
                        .HasDatabaseName("ix_fk_problem_categories_problems_id");

                    b.ToTable("fk_problem_categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = new Guid("e5be1bd7-1a3e-4743-b8dc-d006e346893c"),
                            ProblemsId = new Guid("1f5b111b-b022-4088-a8a3-b227387ccf8e")
                        },
                        new
                        {
                            CategoriesId = new Guid("b30a439f-ed96-4df2-b741-620b64c36d05"),
                            ProblemsId = new Guid("01c0b508-0f00-4dc6-9e3d-9c3d877e50b1")
                        },
                        new
                        {
                            CategoriesId = new Guid("1d3a4c4b-0ed4-4aee-8c21-5abb766a8768"),
                            ProblemsId = new Guid("4ea45687-bc8d-4884-a69e-316373af2f3d")
                        },
                        new
                        {
                            CategoriesId = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            ProblemsId = new Guid("7de73a55-98aa-44ba-a9c7-b8b4435ece3b")
                        },
                        new
                        {
                            CategoriesId = new Guid("56b3d331-0738-4334-ab73-8096f3942d26"),
                            ProblemsId = new Guid("7de73a55-98aa-44ba-a9c7-b8b4435ece3b")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("2480589f-c769-4d03-8540-b2e42d74b86d")
                        },
                        new
                        {
                            CategoriesId = new Guid("56b3d331-0738-4334-ab73-8096f3942d26"),
                            ProblemsId = new Guid("2480589f-c769-4d03-8540-b2e42d74b86d")
                        },
                        new
                        {
                            CategoriesId = new Guid("e5be1bd7-1a3e-4743-b8dc-d006e346893c"),
                            ProblemsId = new Guid("b7ed6f34-7f79-42a2-b64c-cee98fe26986")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("b7ed6f34-7f79-42a2-b64c-cee98fe26986")
                        },
                        new
                        {
                            CategoriesId = new Guid("e5be1bd7-1a3e-4743-b8dc-d006e346893c"),
                            ProblemsId = new Guid("79866f66-49b7-4b59-8c1b-fd87d8545d44")
                        },
                        new
                        {
                            CategoriesId = new Guid("043e189d-3426-4a0a-99a1-2f610d97775c"),
                            ProblemsId = new Guid("7d1a6efc-d8fb-4943-aab5-091316e9ed6c")
                        },
                        new
                        {
                            CategoriesId = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            ProblemsId = new Guid("d4d698a9-3046-4c82-aa0f-19950b0eba39")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("d4d698a9-3046-4c82-aa0f-19950b0eba39")
                        },
                        new
                        {
                            CategoriesId = new Guid("45b574f9-18a1-4aa1-bba6-9decb1f422ee"),
                            ProblemsId = new Guid("f90c71a8-2a06-4e7e-bb43-6c3f86eb7905")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("f90c71a8-2a06-4e7e-bb43-6c3f86eb7905")
                        },
                        new
                        {
                            CategoriesId = new Guid("06606f96-a585-4a23-aefe-8569dec6a6b1"),
                            ProblemsId = new Guid("79ee6684-c6de-4ffc-b4c3-c9ddfc157e35")
                        },
                        new
                        {
                            CategoriesId = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            ProblemsId = new Guid("7dcd8cc2-2b0d-46bd-ba58-4f623af4fe0b")
                        },
                        new
                        {
                            CategoriesId = new Guid("56b3d331-0738-4334-ab73-8096f3942d26"),
                            ProblemsId = new Guid("7dcd8cc2-2b0d-46bd-ba58-4f623af4fe0b")
                        },
                        new
                        {
                            CategoriesId = new Guid("45b574f9-18a1-4aa1-bba6-9decb1f422ee"),
                            ProblemsId = new Guid("6ccf7a13-628a-4d7f-b90a-307ee50ec804")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("6ccf7a13-628a-4d7f-b90a-307ee50ec804")
                        },
                        new
                        {
                            CategoriesId = new Guid("1d3a4c4b-0ed4-4aee-8c21-5abb766a8768"),
                            ProblemsId = new Guid("effd7eae-cd41-459d-aad9-dfe9f7fea564")
                        },
                        new
                        {
                            CategoriesId = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            ProblemsId = new Guid("6d82a36c-61db-4422-b27f-d30c3cb310d9")
                        },
                        new
                        {
                            CategoriesId = new Guid("1d3a4c4b-0ed4-4aee-8c21-5abb766a8768"),
                            ProblemsId = new Guid("a7a0ba1f-fea6-48f8-a01d-93a081aa3766")
                        },
                        new
                        {
                            CategoriesId = new Guid("45b574f9-18a1-4aa1-bba6-9decb1f422ee"),
                            ProblemsId = new Guid("a7a0ba1f-fea6-48f8-a01d-93a081aa3766")
                        },
                        new
                        {
                            CategoriesId = new Guid("e5be1bd7-1a3e-4743-b8dc-d006e346893c"),
                            ProblemsId = new Guid("acd45599-d4f1-46bf-b5dc-71e98448e91a")
                        },
                        new
                        {
                            CategoriesId = new Guid("56b3d331-0738-4334-ab73-8096f3942d26"),
                            ProblemsId = new Guid("8f0ba736-4924-4bc7-a7dd-981597416aa6")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("8f0ba736-4924-4bc7-a7dd-981597416aa6")
                        },
                        new
                        {
                            CategoriesId = new Guid("06606f96-a585-4a23-aefe-8569dec6a6b1"),
                            ProblemsId = new Guid("30397e1d-a5ed-416a-8b19-297f03651510")
                        },
                        new
                        {
                            CategoriesId = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            ProblemsId = new Guid("a089b92c-b40d-4b2d-afd3-b76c4c968a4f")
                        },
                        new
                        {
                            CategoriesId = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            ProblemsId = new Guid("a089b92c-b40d-4b2d-afd3-b76c4c968a4f")
                        });
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5be1bd7-1a3e-4743-b8dc-d006e346893c"),
                            Name = "Дороги та тротуари"
                        },
                        new
                        {
                            Id = new Guid("b30a439f-ed96-4df2-b741-620b64c36d05"),
                            Name = "Освітлення"
                        },
                        new
                        {
                            Id = new Guid("2dade5b6-d7a4-4842-be11-72ab622f787c"),
                            Name = "Благоустрій"
                        },
                        new
                        {
                            Id = new Guid("1d3a4c4b-0ed4-4aee-8c21-5abb766a8768"),
                            Name = "Сміття та екологія"
                        },
                        new
                        {
                            Id = new Guid("06606f96-a585-4a23-aefe-8569dec6a6b1"),
                            Name = "Комунальні послуги"
                        },
                        new
                        {
                            Id = new Guid("45b574f9-18a1-4aa1-bba6-9decb1f422ee"),
                            Name = "Транспорт"
                        },
                        new
                        {
                            Id = new Guid("da3e40eb-2fd6-4e23-8bf0-ed84a642563d"),
                            Name = "Безпека"
                        },
                        new
                        {
                            Id = new Guid("56b3d331-0738-4334-ab73-8096f3942d26"),
                            Name = "Парки та зелені зони"
                        },
                        new
                        {
                            Id = new Guid("043e189d-3426-4a0a-99a1-2f610d97775c"),
                            Name = "Будівництво"
                        },
                        new
                        {
                            Id = new Guid("8dccf214-d951-43a6-ba7e-0df8a39b83bc"),
                            Name = "Інше"
                        });
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_comments_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d950d76-8a5a-42f4-98d1-fdbabb2222dd"),
                            Content = "Так, підтверджую. Їздив сьогодні, ледь не зламав підвіску.",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4517),
                            ProblemId = new Guid("1f5b111b-b022-4088-a8a3-b227387ccf8e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("6f855aa1-3608-42b8-9c9a-64180da215da"),
                            Content = "Вже місяць як така ситуація. Коли вже відремонтують?",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4525),
                            ProblemId = new Guid("1f5b111b-b022-4088-a8a3-b227387ccf8e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("69f3dc28-27f0-43cf-9a6f-60fb9f068c07"),
                            Content = "Дуже небезпечно ходити ввечері, треба терміново виправити.",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4527),
                            ProblemId = new Guid("01c0b508-0f00-4dc6-9e3d-9c3d877e50b1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("9ed70338-1112-44ec-bf79-b8a296d408f8"),
                            Content = "Жахлива ситуація, смердить на всю вулицю.",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4528),
                            ProblemId = new Guid("4ea45687-bc8d-4884-a69e-316373af2f3d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("0be906ea-f2ed-4766-b3db-de58dd9d3e34"),
                            Content = "Дякую, що виправили!",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4529),
                            ProblemId = new Guid("7de73a55-98aa-44ba-a9c7-b8b4435ece3b"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("2c6c958a-24fa-4aa8-9c59-383e9b6dada8"),
                            Content = "Дійсно небезпечно, особливо при сильному вітрі.",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4531),
                            ProblemId = new Guid("2480589f-c769-4d03-8540-b2e42d74b86d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("4edb3f19-c8cf-4566-b345-e54d4ed1f4a7"),
                            Content = "Діти щодня переходять дорогу, це дуже небезпечно!",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4532),
                            ProblemId = new Guid("b7ed6f34-7f79-42a2-b64c-cee98fe26986"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("9ff3f149-f1c4-4376-816c-a30dbfa8ca7b"),
                            Content = "Коли почнуть ремонт? Діти не можуть нормально гратися.",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4533),
                            ProblemId = new Guid("d4d698a9-3046-4c82-aa0f-19950b0eba39"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("2e6513bf-6b33-45f1-a60f-194f21924ef1"),
                            Content = "Вода вже затопила половину дороги!",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4534),
                            ProblemId = new Guid("79ee6684-c6de-4ffc-b4c3-c9ddfc157e35"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("4c4711ba-7263-4440-9b79-ccdde04da769"),
                            Content = "Це екологічна катастрофа для нашого міста!",
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4537),
                            ProblemId = new Guid("effd7eae-cd41-459d-aad9-dfe9f7fea564"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        });
                });

            modelBuilder.Entity("Domain.Identity.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d9e2996-daa9-4861-93c1-89a0d1449b25"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("7699cd79-edcd-47c1-a114-8fe2d2fb3ed4"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da"),
                            Email = "admin@ostroh.edu.ua",
                            FullName = "Адміністратор Острога",
                            PasswordHash = "o8mkEHImpZXmHZe23lYlCA==:YRn3mzOiCTP5Fi1zOoY6LfABVvSgHR1395aJQ0zGvE0="
                        });
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_image");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_image_user_id");

                    b.ToTable("user_image", (string)null);
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_problems_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_problems_user_id");

                    b.ToTable("problems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f5b111b-b022-4088-a8a3-b227387ccf8e"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4176),
                            Description = "Велика яма на дорозі біля будинку №15. Потрібує термінового ремонту.",
                            Latitude = 50.3294,
                            Longitude = 26.514399999999998,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Розбита дорога на вул. Академічна",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4177),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("01c0b508-0f00-4dc6-9e3d-9c3d877e50b1"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4186),
                            Description = "Вже тиждень не світять ліхтарі на ділянці від будинку №10 до №20.",
                            Latitude = 50.328499999999998,
                            Longitude = 26.512499999999999,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Не працює вуличне освітлення на вул. Семінарська",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4186),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("4ea45687-bc8d-4884-a69e-316373af2f3d"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4189),
                            Description = "Сміттєві контейнери не вивозяться вже 3 дні, сміття розкидане навколо.",
                            Latitude = 50.330100000000002,
                            Longitude = 26.5167,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Переповнені сміттєві баки біля ринку",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4189),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("7de73a55-98aa-44ba-a9c7-b8b4435ece3b"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4191),
                            Description = "Дерев'яна лавка зламана, потребує заміни або ремонту.",
                            Latitude = 50.327800000000003,
                            Longitude = 26.518899999999999,
                            StatusId = new Guid("7938af4f-4ab0-4dba-9923-3366bb4bc1a5"),
                            Title = "Зламана лавка в парку Тараса Шевченка",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4191),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("2480589f-c769-4d03-8540-b2e42d74b86d"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4193),
                            Description = "Старе дерево нахилилося і може впасти на дорогу. Небезпечно для пішоходів та транспорту.",
                            Latitude = 50.331200000000003,
                            Longitude = 26.509799999999998,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Аварійне дерево на вул. Луцька",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4193),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("b7ed6f34-7f79-42a2-b64c-cee98fe26986"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4197),
                            Description = "Пішохідний перехід біля школи №2 без розмітки, небезпечно для дітей.",
                            Latitude = 50.328899999999997,
                            Longitude = 26.515599999999999,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Відсутня розмітка на пішохідному переході",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4197),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("79866f66-49b7-4b59-8c1b-fd87d8545d44"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4220),
                            Description = "Великі тріщини на тротуарі, небезпечно для пішоходів, особливо в темний час доби.",
                            Latitude = 50.330500000000001,
                            Longitude = 26.513400000000001,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Тріщина на тротуарі вул. Папаніна",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4220),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("7d1a6efc-d8fb-4943-aab5-091316e9ed6c"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4222),
                            Description = "Ведеться будівництво без відповідних дозволів, порушується архітектурний вигляд міста.",
                            Latitude = 50.329799999999999,
                            Longitude = 26.517800000000001,
                            StatusId = new Guid("de701d25-f9f1-40f8-8688-304a3f2314e3"),
                            Title = "Незаконне будівництво на вул. Князів Острозьких",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4222),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("d4d698a9-3046-4c82-aa0f-19950b0eba39"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4224),
                            Description = "Гойдалки та гірка на дитячому майданчику в аварійному стані.",
                            Latitude = 50.328200000000002,
                            Longitude = 26.514199999999999,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Потребує ремонту дитячий майданчик",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4224),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("f90c71a8-2a06-4e7e-bb43-6c3f86eb7905"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4226),
                            Description = "На перехресті вул. Академічна та вул. Семінарська відсутній знак пріоритету.",
                            Latitude = 50.3307,
                            Longitude = 26.516100000000002,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Відсутній дорожній знак на перехресті",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4226),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("79ee6684-c6de-4ffc-b4c3-c9ddfc157e35"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4228),
                            Description = "Витік води з водопровідної труби, вода заливає дорогу.",
                            Latitude = 50.329099999999997,
                            Longitude = 26.517099999999999,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Прорив водопроводу на вул. Замкова",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4228),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("7dcd8cc2-2b0d-46bd-ba58-4f623af4fe0b"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4230),
                            Description = "Клумби біля центральної площі не доглядаються, заросли бур'яном.",
                            Latitude = 50.329599999999999,
                            Longitude = 26.514900000000001,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Зарослі бур'яном клумби в центрі",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4230),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("6ccf7a13-628a-4d7f-b90a-307ee50ec804"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4232),
                            Description = "Світлофор на перехресті не працює вже другий день.",
                            Latitude = 50.331499999999998,
                            Longitude = 26.510200000000001,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Не працює світлофор на вул. Луцька",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4232),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("effd7eae-cd41-459d-aad9-dfe9f7fea564"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4235),
                            Description = "Стихійне сміттєзвалище утворилося в лісосмузі за містом.",
                            Latitude = 50.327199999999998,
                            Longitude = 26.519500000000001,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Сміттєзвалище в лісосмузі",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4235),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("6d82a36c-61db-4422-b27f-d30c3cb310d9"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4237),
                            Description = "Огорожа школи №1 іржава та потребує фарбування.",
                            Latitude = 50.328800000000001,
                            Longitude = 26.5138,
                            StatusId = new Guid("7938af4f-4ab0-4dba-9923-3366bb4bc1a5"),
                            Title = "Потребує фарбування огорожа школи",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4237),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("a7a0ba1f-fea6-48f8-a01d-93a081aa3766"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4239),
                            Description = "На автобусній зупинці 'Центр' немає урн для сміття.",
                            Latitude = 50.330199999999998,
                            Longitude = 26.5153,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Відсутні урни на зупинці",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4239),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("acd45599-d4f1-46bf-b5dc-71e98448e91a"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4241),
                            Description = "Бордюр зруйнований на протяжності 5 метрів.",
                            Latitude = 50.329900000000002,
                            Longitude = 26.516400000000001,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Зламаний бордюр на вул. Князів Острозьких",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4241),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("8f0ba736-4924-4bc7-a7dd-981597416aa6"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4243),
                            Description = "Гілки дерева загрожують електричним проводам.",
                            Latitude = 50.328600000000002,
                            Longitude = 26.514700000000001,
                            StatusId = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Title = "Потребує обрізки дерева біля будинку",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4243),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("30397e1d-a5ed-416a-8b19-297f03651510"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4245),
                            Description = "Після дощу утворюються великі калюжі через відсутність каналізації.",
                            Latitude = 50.3279,
                            Longitude = 26.513200000000001,
                            StatusId = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Title = "Відсутня каналізація на вул. Садова",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4245),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("a089b92c-b40d-4b2d-afd3-b76c4c968a4f"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4247),
                            Description = "Вандали розмалювали фасад історичної будівлі в центрі міста.",
                            Latitude = 50.329300000000003,
                            Longitude = 26.517499999999998,
                            StatusId = new Guid("7938af4f-4ab0-4dba-9923-3366bb4bc1a5"),
                            Title = "Граффіті на фасаді історичної будівлі",
                            UpdatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4247),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        });
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.HasKey("Id")
                        .HasName("pk_problem_image");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_problem_image_problem_id");

                    b.ToTable("problem_image", (string)null);
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<double>("Points")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("points");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_ratings_problem_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ratings_user_id");

                    b.ToTable("ratings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rating_Points_Range", "points >= 1.00 AND points <= 5.00");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcd7788-694f-4a78-89a9-c2867e7cd4f7"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4574),
                            Points = 4.5,
                            ProblemId = new Guid("1f5b111b-b022-4088-a8a3-b227387ccf8e"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("227f26bc-0bc2-4902-b4c8-535e85774868"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4579),
                            Points = 5.0,
                            ProblemId = new Guid("01c0b508-0f00-4dc6-9e3d-9c3d877e50b1"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("294f3d16-343f-49e5-a4ad-e502c6264681"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4580),
                            Points = 4.7999999999999998,
                            ProblemId = new Guid("4ea45687-bc8d-4884-a69e-316373af2f3d"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("0107dfd0-ecc1-4246-8f72-280374fcb460"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4581),
                            Points = 5.0,
                            ProblemId = new Guid("2480589f-c769-4d03-8540-b2e42d74b86d"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("879f0347-50bf-4c06-8d8e-f8709f63ecbe"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4582),
                            Points = 4.9000000000000004,
                            ProblemId = new Guid("b7ed6f34-7f79-42a2-b64c-cee98fe26986"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("d6335847-2415-40cd-9a49-4f00d7dd6759"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4584),
                            Points = 4.2000000000000002,
                            ProblemId = new Guid("79866f66-49b7-4b59-8c1b-fd87d8545d44"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("fef06e7a-248d-445f-928e-fa87367b7c90"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4585),
                            Points = 4.7000000000000002,
                            ProblemId = new Guid("f90c71a8-2a06-4e7e-bb43-6c3f86eb7905"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("cd9f4d27-d406-41d8-8af8-cd537ae7da07"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4588),
                            Points = 5.0,
                            ProblemId = new Guid("79ee6684-c6de-4ffc-b4c3-c9ddfc157e35"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("e10cc8db-7cf3-4c8f-8eb2-eb31a1393f63"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4589),
                            Points = 4.5999999999999996,
                            ProblemId = new Guid("effd7eae-cd41-459d-aad9-dfe9f7fea564"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        },
                        new
                        {
                            Id = new Guid("b04d7405-a007-4fe2-b032-63cc491c857c"),
                            CreatedAt = new DateTime(2025, 10, 20, 20, 47, 54, 654, DateTimeKind.Utc).AddTicks(4590),
                            Points = 4.2999999999999998,
                            ProblemId = new Guid("acd45599-d4f1-46bf-b5dc-71e98448e91a"),
                            UserId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        });
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c986073-d30e-4815-901f-41aca95e9f52"),
                            Name = "Нова"
                        },
                        new
                        {
                            Id = new Guid("a7829f55-3c01-4bd3-b835-7968a7dd2ca1"),
                            Name = "В роботі"
                        },
                        new
                        {
                            Id = new Guid("7938af4f-4ab0-4dba-9923-3366bb4bc1a5"),
                            Name = "Виконано"
                        },
                        new
                        {
                            Id = new Guid("de701d25-f9f1-40f8-8688-304a3f2314e3"),
                            Name = "Відхилено"
                        },
                        new
                        {
                            Id = new Guid("7a0fe21a-2487-49e8-b603-36c373f5cdef"),
                            Name = "Потребує уточнення"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_fk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_fk_user_roles_users_id");

                    b.ToTable("fk_user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("9d9e2996-daa9-4861-93c1-89a0d1449b25"),
                            UsersId = new Guid("12e667a5-425a-4fc1-b852-7f73b0bfa3da")
                        });
                });

            modelBuilder.Entity("CategoryProblem", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_categories_categories_id");

                    b.HasOne("Domain.Problems.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_problem_categories_problems_problems_id");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Identity.Users.UserImage", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Identity.Users.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_images_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.HasOne("Domain.Statuses.Status", "ProblemStatus")
                        .WithMany("Problems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problems_statuses_status_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problems_users_user_id");

                    b.Navigation("ProblemStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Problems.ProblemImage", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Images")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_images_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Domain.Ratings.Rating", b =>
                {
                    b.HasOne("Domain.Problems.Problem", "Problem")
                        .WithMany("Ratings")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_problems_problem_id");

                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ratings_users_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("Domain.Identity.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Identity.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Identity.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fk_user_roles_users_users_id");
                });

            modelBuilder.Entity("Domain.Identity.Users.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Problems");

                    b.Navigation("Ratings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Problems.Problem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
